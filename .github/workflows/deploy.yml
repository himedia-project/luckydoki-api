name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REPOSITORY_NAME: luckydoki-api

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE }}" > src/.env

      - name: Docker Hub에 로그인하기
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 생성
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY_NAME }} .

      - name: Docker Hub에 Docker 이미지 Push하기
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY_NAME }}:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true # 이전에 실행중인 컨테이너 중지
          script: |
            docker stop ${{ env.REPOSITORY_NAME }} || true
            docker rm ${{ env.REPOSITORY_NAME }} || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY_NAME }}:latest || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY_NAME }}:latest
            docker run -d --name ${{ env.REPOSITORY_NAME }} -p 8080:8080 --add-host=host.docker.internal:172.17.0.1 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPOSITORY_NAME }}:latest