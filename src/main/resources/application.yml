server:
  port: 8080
  tomcat:
    uri-encoding: UTF-8
    # 특수문자 허용 설정
    relaxed-query-chars: '|,{,},[,],^,`,<,>,\,;,/,?,@,#,$,%,&,=,+'
    relaxed-path-chars: '|,{,},[,],^,`,<,>,\,;,/,?,@,#,$,%,&,=,+'

  servlet:
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  profiles:
    active: local # 로컬 프로파일 활성화
  config:
    import: optional:file:.env[.properties] # 환경변수 파일 로드
  output:
    ansi:
      enabled: always # ANSI 콘솔 색상 활성화 (JUnit 테스트 포함)
  web:
    resources:
      add-mappings: false # 정적 리소스 매핑 추가 여부 false
    #  mvc:
  #    throw-exception-if-no-handler-found: true # 요청 처리 핸들러 없을 때 예외 처리
  servlet:
    multipart:
      max-request-size: 30MB # 최대 요청 크기, ⭐nginx client_max_body_size와 동일하게 설정
      max-file-size: 10MB # 최대 파일 크기
  jpa:
    open-in-view: false # open in view 설정
    hibernate:
      ddl-auto: update # 테이블 생성 및 업데이트 전략 (create, create-drop, update, validate, none)
    #    defer-datasource-initialization: true # true일시, DataSource 초기화 지연
    properties:
      hibernate:
        format_sql: true # SQL 포맷팅
        highlight_sql: true # SQL 하이라이트 출력
        use_sql_comments: true # JPQL SQL 주석 사용
        default_batch_fetch_size: 100 # 기본 배치 크기 설정
  #
  #  sql:
  #    init:
  #      platform: mysql # SQL 초기화 플랫폼 (mysql, h2, postgresql, oracle, sqlserver)
  #      data-locations: classpath:sql/data.sql # ddl-auto가 create, create-drop, update일 경우에만 해당, validate/none일 경우 무시됨
  #      mode: always # SQL 초기화 모드 (always, never, embedded, embedded-always)

  elasticsearch:
    uris: http://localhost:9200
    username: ${ELASTICSEARCH_USERNAME}
    password: ${ELASTICSEARCH_PASSWORD}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.ssl.trust: smtp.gmail.com

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: true

  # 스케쥴러 설정
  task:
    scheduling:
      pool:
        size: 5
      thread-name-prefix: search-scheduler-

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      group-id: coupon-issue-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.himedia.luckydokiapi.domain.coupon.dto

# 쿠폰 발급 관련 Kafka 토픽 설정
coupon:
  kafka:
    topics:
      issue: coupon-issue-topic

app:
  props:
    social:
      kakao:
        client-id: ${KAKAO_CLIENT_ID}
        client-secret: ${KAKAO_CLIENT_SECRET}
        authorization-uri: https://kauth.kakao.com/oauth/authorize
        token-uri: https://kauth.kakao.com/oauth/token
        user-info-uri: https://kapi.kakao.com/v2/user/me
        user-info-name-attribute-key: id
        client-name: Kakao
      google:
        client-id: ${GOOGLE_CLIENT_ID}
        client-secret: ${GOOGLE_CLIENT_SECRET}
        token-uri: https://oauth2.googleapis.com/token
        user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
    jwt:
      secret-key: ${JWT_SECRET_KEY}
      access-token-expiration-period: 15 # 액세스 토큰의 유효기간, 분단위 15분, or 150분 = 2시간 30분
      refresh-token-expiration-period: 1440 # 1440 # 리프레시 토큰의 유효기간, 1440분 = 60 * 24 = 24시간

    aws:
      key:
        access-key: ${AWS_ACCESS_KEY}
        secret-key: ${AWS_SECRET_KEY}
      s3:
        bucket-name: ${AWS_S3_BUCKET_NAME}
        region: ${AWS_REGION}
      cloudfront:
        domain: d37kib8zzpdmtf.cloudfront.net
        enabled: true

sms:
  api-key: ${SMS_API_KEY}
  api-secret: ${SMS_API_SECRET}
  from: ${SMS_FROM}

toss:
  secret-key: ${TOSS_SECRET_KEY}
  url: https://api.tosspayments.com/v1

google:
  translation:
    api-key: ${GOOGLE_TRANSLATION_API_KEY}

---
spring:
  config:
    activate:
      on-profile: local

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${LOCAL_MYSQL_URL}
    username: ${LOCAL_MYSQL_USERNAME}
    password: ${LOCAL_MYSQL_PASSWORD}

  data:
    mongodb:
      uri: ${LOCAL_MONGODB_URI}
      database: ${MONGODB_DATABASE}
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD}

app:
  props:
    social:
      kakao:
        redirect-uri: ${KAKAO_LOCAL_REDIRECT_URI}
      google:
        redirect-uri: ${GOOGLE_LOCAL_REDIRECT_URI}

logging:
  level:
    org.hibernate.SQL: debug # Hibernate SQL 로그 레벨
    org.hibernate.orm.jdbc.bind: trace # Hibernate SQL 바인딩 로그 레벨
    org.springframework.transaction.interceptor: trace # Spring 트랜잭션 인터셉터 로그 레벨

---
spring:
  config:
    activate:
      on-profile: prod # 운영 환경
  jpa:
    open-in-view: false # open in view 설정
    hibernate:
      ddl-auto: update # 테이블 생성 및 업데이트 전략 (create, create-drop, update, validate, none)
    #    defer-datasource-initialization: true # true일시, DataSource 초기화 지연
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect # Hibernate Dialect 설정
        format_sql: true # SQL 포맷팅
        highlight_sql: true # SQL 하이라이트 출력
        use_sql_comments: true # JPQL SQL 주석 사용
        default_batch_fetch_size: 100 # 기본 배치 크기 설정
  sql:
    init:
      platform: mysql # SQL 초기화 플랫폼 (mysql, h2, postgresql, oracle, sqlserver)
      data-locations: classpath:sql/data.sql # ddl-auto가 create, create-drop, update일 경우에만 해당, validate/none일 경우 무시됨
      mode: never # SQL 초기화 모드 (always, never, embedded, embedded-always)

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${PROD_MYSQL_URL}
    username: ${PROD_MYSQL_USERNAME}
    password: ${PROD_MYSQL_PASSWORD}
    hikari:
      max-lifetime: 600000 # 최대 수명 (밀리초)
      idle-timeout: 300000 # 유휴 시간 (밀리초)
      connection-timeout: 30000 # 연결 시간 초과 (밀리초)

  data:
    mongodb:
      uri: ${PROD_MONGODB_URI}
      database: ${MONGODB_DATABASE}
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD}

app:
  props:
    social:
      kakao:
        redirect-uri: ${KAKAO_PROD_REDIRECT_URI}
      google:
        redirect-uri: ${GOOGLE_PROD_REDIRECT_URI}

logging:
  level:
    #    org.hibernate.SQL: error # Hibernate SQL 로그 레벨
    org.hibernate.SQL: debug # Hibernate SQL 로그 레벨
    org.hibernate.orm.jdbc.bind: trace # Hibernate SQL 바인딩 로그 레벨
    org.springframework.transaction.interceptor: trace # Spring 트랜잭션 인터셉터 로그 레벨
